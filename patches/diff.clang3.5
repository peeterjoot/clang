diff --git a/RenameMethod.cpp b/RenameMethod.cpp
index 7bb56ba..1266017 100644
--- a/RenameMethod.cpp
+++ b/RenameMethod.cpp
@@ -305,7 +305,7 @@ private:
 int main(int argc, const char **argv) {
    // First see if we can create the compile command line from the
    // positional parameters after "--".
-   OwningPtr<CompilationDatabase> Compilations(
+   std::unique_ptr<CompilationDatabase> Compilations(
       FixedCompilationDatabase::loadFromCommandLine(argc, argv));
 
    // Do normal command line handling from the rest of the arguments.
@@ -382,5 +382,5 @@ int main(int argc, const char **argv) {
       &CallCallback);
 #endif
 
-   return Tool.runAndSave(newFrontendActionFactory(&Finder));
+   return Tool.runAndSave(newFrontendActionFactory(&Finder).get());
 }
diff --git a/classvisitor.h b/classvisitor.h
index aaa61d8..500eebd 100644
--- a/classvisitor.h
+++ b/classvisitor.h
@@ -197,8 +197,20 @@ int main( int argc, char * argv[] )
    int c = 0 ;
    int optindex = 0 ;
 
-   llvm::IntrusiveRefCntPtr<PreprocessorOptions> pOpts( new PreprocessorOptions() ) ;
-   llvm::IntrusiveRefCntPtr<HeaderSearchOptions> headerSearchOptions( new HeaderSearchOptions() ) ;
+   std::unique_ptr<CompilerInvocation> CInvok;
+   //CInvok.reset(new CompilerInvocation(CI.getInvocation()));
+   CInvok.reset(new CompilerInvocation());
+   CompilerInvocation & CI = *CInvok ;
+
+   CInvok->getPreprocessorOpts().ChainedIncludes.clear();
+   CInvok->getPreprocessorOpts().ImplicitPCHInclude.clear();
+   CInvok->getPreprocessorOpts().ImplicitPTHInclude.clear();
+   CInvok->getPreprocessorOpts().DisablePCHValidation = true;
+   CInvok->getPreprocessorOpts().Includes.clear();
+   CInvok->getPreprocessorOpts().MacroIncludes.clear();
+   CInvok->getPreprocessorOpts().Macros.clear();
+
+   CInvok->HeaderSearchOpts = new HeaderSearchOptions() ;
 
 // 
 // This handles the issues with <stdlib.h> not found ... and so forth.  However, it introduces problems with various __builtin... not found.
@@ -303,23 +315,23 @@ int main( int argc, char * argv[] )
          case 'I':
          {
             //printf( "-I : %s\n", optarg ) ;
-            headerSearchOptions->AddPath( optarg,
-                                          frontend::Quoted,
-                                          false, // IsFramework
-                                          false ) ; // IgnoreSysRoot
+            CInvok->getHeaderSearchOpts().AddPath( optarg,
+                                                   frontend::Quoted,
+                                                   false, // IsFramework
+                                                   false ) ; // IgnoreSysRoot
             break ;
          }
          case 'D':
          {
             //printf( "-D : %s\n", optarg ) ;
-            pOpts->addMacroDef( optarg ) ;
+            CInvok->getPreprocessorOpts().addMacroDef( optarg ) ;
 
             break ;
          }
          case 'U':
          {
             //printf( "-U : %s\n", optarg ) ;
-            pOpts->addMacroUndef( optarg ) ;
+            CInvok->getPreprocessorOpts().addMacroUndef( optarg ) ;
 
             break ;
          }
@@ -336,136 +348,87 @@ int main( int argc, char * argv[] )
       }
    }
 
-   if ( optind != (argc - 1) )
+   if ( optind != (argc - 1) ) 
    {
       printUsageAndExit( argv[0] ) ;
    }
- 
-   DiagnosticOptions diagnosticOptions ;
 
-   TextDiagnosticPrinter * pTextDiagnosticPrinter 
-      = new TextDiagnosticPrinter( llvm::outs(),
-                                   &diagnosticOptions ) ;
+   InputKind IK = clang::IK_CXX ;
+   CInvok->getFrontendOpts().Inputs.clear();
+   string filename(argv[optind]) ;
+   FrontendInputFile InputFile(filename, IK);
+   CInvok->getFrontendOpts().Inputs.push_back(InputFile);
 
-   llvm::IntrusiveRefCntPtr<DiagnosticIDs> pDiagIDs ;
+   TextDiagnosticPrinter *DiagClient =
+     new TextDiagnosticPrinter(llvm::errs(), new DiagnosticOptions());
+   IntrusiveRefCntPtr<DiagnosticIDs> DiagID(new DiagnosticIDs());
+   IntrusiveRefCntPtr<DiagnosticsEngine> Diags(
+       new DiagnosticsEngine(DiagID, &CI.getDiagnosticOpts(), DiagClient));
 
-   DiagnosticsEngine * pDiagnosticsEngine 
-      = new DiagnosticsEngine( pDiagIDs,
-                               &diagnosticOptions,
-                               pTextDiagnosticPrinter ) ;
-
-   LangOptions languageOptions ;
+   std::unique_ptr<CompilerInstance> Clang(new CompilerInstance());
 
    // Allow C++ code (https://github.com/loarabia/Clang-tutorial/blob/master/CIrewriter.cpp)
-   languageOptions.GNUMode          = 1 ;
-   languageOptions.CXXExceptions    = 1 ;
-   languageOptions.RTTI             = 1 ;
-   languageOptions.Bool             = 1 ;
-   languageOptions.CPlusPlus        = 1 ;
-   languageOptions.WChar            = 1 ; // stdlib.h and friends want wchar_t to be defined by the compiler in C++ mode.
-   //languageOptions.NoBuiltin        = 0 ;
-
-   FileSystemOptions fileSystemOptions ;
-
-   FileManager fileManager( fileSystemOptions ) ;
-
-   SourceManager sourceManager( *pDiagnosticsEngine,
-                                fileManager ) ;
-
-   TargetOptions targetOptions ;
-
-   targetOptions.Triple = llvm::sys::getDefaultTargetTriple() ;
-
-   TargetInfo * pTargetInfo = TargetInfo::CreateTargetInfo( *pDiagnosticsEngine,
-                                                            &targetOptions ) ;
-
-   HeaderSearch headerSearch( headerSearchOptions,
-                              sourceManager,
-                              *pDiagnosticsEngine,
-                              languageOptions,
-                              pTargetInfo ) ;
-
-   CompilerInstance compInst ;
-
-   Preprocessor preprocessor( pOpts,
-                              *pDiagnosticsEngine,
-                              languageOptions,
-                              pTargetInfo,
-                              sourceManager,
-                              headerSearch,
-                              compInst ) ;
-
-   FrontendOptions frontendOptions ;
-   //frontendOptions.SkipFunctionBodies = 1 ;
-
-   InitializePreprocessor( preprocessor,
-                           *pOpts,
-                           *headerSearchOptions,
-                           frontendOptions ) ;
-
-   const FileEntry * pFile = fileManager.getFile( argv[optind] ) ;
-   
-   if ( pFile )
-   {
-      sourceManager.createMainFileID( pFile ) ;
+   Clang->getLangOpts().GNUMode          = 1 ;
+   Clang->getLangOpts().CXXExceptions    = 1 ;
+   Clang->getLangOpts().RTTI             = 1 ;
+   Clang->getLangOpts().Bool             = 1 ;
+   Clang->getLangOpts().CPlusPlus        = 1 ;
+   Clang->getLangOpts().WChar            = 1 ; // stdlib.h and friends want wchar_t to be defined by the compiler in C++ mode.
+   //Clang->getLangOpts().NoBuiltin        = 0 ;
 
-      Rewriter TheRewriter ;
+   Clang->setInvocation(CInvok.release());
+   Clang->setDiagnostics(Diags.get());
 
-      #if defined REWRITER
-      // A Rewriter helps us manage the code rewriting task.
-      TheRewriter.setSourceMgr( sourceManager, languageOptions ) ;
-      #endif
+   Clang->getInvocation().getTargetOpts().Triple = llvm::sys::getDefaultTargetTriple() ;
 
-      IdentifierTable identifierTable( languageOptions ) ;
+   Clang->setTarget(TargetInfo::CreateTargetInfo(
+       Clang->getDiagnostics(), Clang->getInvocation().TargetOpts));
+   Clang->createFileManager();
+   Clang->createSourceManager(Clang->getFileManager());
+   Clang->createPreprocessor(TU_Complete);
 
-      SelectorTable selectorTable ;
+   Rewriter TheRewriter ;
 
-      Builtin::Context builtinContext ;
+   #if defined REWRITER
+   // A Rewriter helps us manage the code rewriting task.
+   TheRewriter.setSourceMgr( sourceManager, languageOptions ) ;
+   #endif
 
-      builtinContext.InitializeTarget( *pTargetInfo ) ;
-      //builtinContext.InitializeBuiltins( identifierTable, languageOptions ) ;
+   Clang->createASTContext();
 
-      ASTContext * pASTcontext = new ASTContext( languageOptions,
-                                                 sourceManager,
-                                                 pTargetInfo,
-                                                 identifierTable,
-                                                 selectorTable,
-                                                 builtinContext,
-                                                 0 /* size_reserve*/ ) ;
+   MyASTConsumer astConsumer( *Clang, TheRewriter ) ;
 
-      compInst.setASTContext( pASTcontext ) ;
+   Clang->getDiagnosticClient().BeginSourceFile(Clang->getLangOpts(),
+                                                &Clang->getPreprocessor());
+   Clang->setASTConsumer( &astConsumer );
+   Clang->createSema( TU_Complete, nullptr );
 
-      MyASTConsumer astConsumer( compInst, TheRewriter ) ;
+   ParseAST(Clang->getSema());
 
-      pTextDiagnosticPrinter->BeginSourceFile( languageOptions, &preprocessor ) ;
+   Clang->getDiagnosticClient().EndSourceFile() ;
 
-      ParseAST( preprocessor, &astConsumer, *pASTcontext ) ;
+   #if defined CLASSVISITOR
+      g_depMap.dump() ;
 
-      pTextDiagnosticPrinter->EndSourceFile() ;
-
-      #if defined CLASSVISITOR
-         g_depMap.dump() ;
-
-         if ( g_out == &g_outFile )
-         {
-            g_outFile.close() ;
-         }
-      #elif defined REWRITER
-         // At this point the rewriter's buffer should be full with the rewritten
-         // file contents.
-         const RewriteBuffer * RewriteBuf =
-             TheRewriter.getRewriteBufferFor( sourceManager.getMainFileID() ) ;
+      if ( g_out == &g_outFile )
+      {
+         g_outFile.close() ;
+      }
+   #elif defined REWRITER
+      // At this point the rewriter's buffer should be full with the rewritten
+      // file contents.
+      const RewriteBuffer * RewriteBuf =
+          TheRewriter.getRewriteBufferFor( sourceManager.getMainFileID() ) ;
 
-         if ( RewriteBuf )
-         {
-            llvm::outs() << string( RewriteBuf->begin(), RewriteBuf->end() ) ;
-         }
-         else
-         {
-            cout << "file unchanged: " << argv[optind] << endl ;
-         }
-      #endif
-   }
+      if ( RewriteBuf )
+      {
+         llvm::outs() << string( RewriteBuf->begin(), RewriteBuf->end() ) ;
+      }
+      else
+      {
+         cout << "file unchanged: " << argv[optind] << endl ;
+      }
+   #endif
 
    return 0 ;
 }
diff --git a/dumper.h b/dumper.h
index 3e63fd0..c527839 100644
--- a/dumper.h
+++ b/dumper.h
@@ -197,7 +197,7 @@ bool VisitBinaryOperator( BinaryOperator * v )
    return true ;
 }
 
-
+#if 0
 bool VisitBinaryTypeTraitExpr( BinaryTypeTraitExpr * v )
 {
    cout << endl << "bool VisitBinaryTypeTraitExpr( BinaryTypeTraitExpr * v )" << endl ;
@@ -206,7 +206,7 @@ bool VisitBinaryTypeTraitExpr( BinaryTypeTraitExpr * v )
 
    return true ;
 }
-
+#endif
 
 bool VisitBinAssign( BinaryOperator * v )
 {
@@ -2727,7 +2727,7 @@ bool VisitUnaryTransformType( UnaryTransformType * v )
    return true ;
 }
 
-
+#if 0
 bool VisitUnaryTypeTraitExpr( UnaryTypeTraitExpr * v )
 {
    cout << endl << "bool VisitUnaryTypeTraitExpr( UnaryTypeTraitExpr * v )" << endl ;
@@ -2736,7 +2736,7 @@ bool VisitUnaryTypeTraitExpr( UnaryTypeTraitExpr * v )
 
    return true ;
 }
-
+#endif
 
 bool VisitUnresolvedLookupExpr( UnresolvedLookupExpr * v )
 {
diff --git a/makefile b/makefile
index eaa92b7..90d66ca 100644
--- a/makefile
+++ b/makefile
@@ -8,7 +8,7 @@ include makefile.$(HOSTNAME)
 
 CFLAGS += $(shell $(LLVM_BIN_PATH)llvm-config --cxxflags)
 #CFLAGS := $(filter-out -fno-exceptions,$(CFLAGS))
-LDFLAGS += $(shell $(LLVM_BIN_PATH)llvm-config --ldflags)
+CLANG_LDFLAGS += $(shell $(LLVM_BIN_PATH)llvm-config --ldflags)
 
 LLVMSRC := $(shell $(LLVM_BIN_PATH)/llvm-config --src-root)
 LLVMPREFIX := $(shell $(LLVM_BIN_PATH)/llvm-config --prefix)
@@ -28,17 +28,22 @@ LLVMPREFIX := $(shell $(LLVM_BIN_PATH)/llvm-config --prefix)
 CFLAGS := $(subst -O3,,$(CFLAGS))
 #-------------------------------------------------
 
+LDFLAGS += $(CLANG_LDFLAGS)
 LDFLAGS += -lclangFrontendTool -lclangFrontend -lclangDriver 
 LDFLAGS += -lclangSerialization -lclangCodeGen -lclangParse 
 LDFLAGS += -lclangSema -lclangStaticAnalyzerFrontend 
 LDFLAGS += -lclangStaticAnalyzerCheckers -lclangStaticAnalyzerCore 
 LDFLAGS += -lclangAnalysis -lclangARCMigrate 
-LDFLAGS += -lclangRewriteCore 
 LDFLAGS += -lclangEdit -lclangAST -lclangLex -lclangBasic
 LDFLAGS += -lLLVMMCParser
 LDFLAGS += -lLLVMBitReader
 LDFLAGS += -lLLVMOption
 LDFLAGS += -lLLVMTransformUtils
+LDFLAGS += -ldl
+LDFLAGS += -lpthread
+LDFLAGS += -lncurses
+LDFLAGS += -lz
+LDFLAGS += -lclangRewrite
 
 LDFLAGS += $(shell $(LLVM_BIN_PATH)llvm-config --libs $(LLVM_LIBS))
 
@@ -80,13 +85,13 @@ dumper: dumper.o
 #	cp $< $@
 
 #ClangCheck: ClangCheck.o
-#	$(CXX) $< -o $@ $(LDFLAGS) -lclangFrontend -lclangSerialization -lclangDriver -lclangTooling -lclangParse -lclangSema -lclangAnalysis -lclangRewriteFrontend -lclangRewriteCore -lclangEdit -lclangAST -lclangLex -lclangBasic -lLLVMSupport
+#	$(CXX) $< -o $@ $(LDFLAGS) -lclangFrontend -lclangSerialization -lclangDriver -lclangTooling -lclangParse -lclangSema -lclangAnalysis -lclangRewriteFrontend -lclangEdit -lclangAST -lclangLex -lclangBasic -lLLVMSupport
 
 $(LLVMPREFIX)/bin/stripGmblkVoidPPcast : stripGmblkVoidPPcast.o
-	$(CXX) $< -o $@ $(LDFLAGS) -lclangFrontend -lclangSerialization -lclangDriver -lclangTooling -lclangParse -lclangSema -lclangAnalysis -lclangRewriteFrontend -lclangRewriteCore -lclangEdit -lclangAST -lclangLex -lclangBasic -lLLVMSupport -lclangASTMatchers
+	$(CXX) -Wl,-Map,$@.map $< -o $@ $(LDFLAGS) -lclangASTMatchers -lclangTooling -lclangRewrite
 
 $(LLVMPREFIX)/bin/gblkToGmblk : gblkToGmblk.o
-	$(CXX) $< -o $@ $(LDFLAGS) -lclangFrontend -lclangSerialization -lclangDriver -lclangTooling -lclangParse -lclangSema -lclangAnalysis -lclangRewriteFrontend -lclangRewriteCore -lclangEdit -lclangAST -lclangLex -lclangBasic -lLLVMSupport -lclangASTMatchers
+	$(CXX) -Wl,-Map,$@.map $< -o $@ $(LDFLAGS) -lclangASTMatchers -lclangTooling -lclangRewrite
 
 classvisitor: classvisitor.o
 	$(CXX) $< -o $@ $(LDFLAGS)
diff --git a/makefile.hotellnx108 b/makefile.hotellnx108
index 4e1787b..2d8194f 100644
--- a/makefile.hotellnx108
+++ b/makefile.hotellnx108
@@ -2,11 +2,9 @@
 # local clang build related stuff:
 
 #-------------------------------------------------
-# Built two versions of clang, one for debugging
-# into rewritersample.cpp:
+# The 108 build of clang is done in debug mode.
 #-------------------------------------------------
 GCCPATH=$(HOME)/toolchain492
-#GCCPATH=$(HOME)/toolchain492.opt
 
 CLANGPATH=$(GCCPATH)
 
@@ -16,12 +14,7 @@ LDFLAGS += -Wl,-rpath-link,$(CLANGPATH)/lib64:$(CLANGPATH)/lib
 
 export LD_LIBRARY_PATH := $(CLANGPATH)/lib64:$(CLANGPATH)/lib
 
-#CXX := $(GCCPATH)/bin/g++
-CXX := $(CLANGPATH)/bin/clang++
+CXX := $(CLANGPATH)/bin/g++
+#CXX := $(CLANGPATH)/bin/clang++
 
 LLVM_BIN_PATH := $(CLANGPATH)/bin/
-
-#CONFIG_RELEASE = Release+Asserts
-
-#CFLAGS += -gdwarf-2
-
